# Push a qubit
import numpy as np

def pushQubit(weights):
    global workspace
    workspace = np.reshape(workspace,(1,-1)) 
    workspace = np.kron(workspace,weights)


workspace = np.array([[1.]])       # create empty qubit stack pushQubit([1,0])
pushQubit([1,0])
print(workspace)
pushQubit([3/5,4/5])               # push a 2nd qubit print(workspace)
print(workspace)

# Perform gate operation
def applyGate(gate):
    global workspace
    workspace = np.reshape(workspace,(-1,gate.shape[0]))
    np.matmul(workspace,gate.T,out=workspace)
X_gate = np.array([[0, 1],   # Pauli X gate
                  [1, 0]])   # = NOT gate
np.matmul(X_gate,[1,0])


# or push qubit & applygate
#workspace = np.array([[1.]])       # reset workspace 
#pushQubit([1,0])
#print("input",workspace)
#applyGate(X_gate)                  # = NOT 
#print("output",workspace)


#Apply swap gate to change qubit order if needed
SWAP_gate = np.array([[1, 0, 0, 0], # Swap gate [0, 0, 1, 0],
                      [0, 1, 0, 0],
                      [0, 0, 0, 1]])
workspace = np.array([[1.]])
pushQubit([1,0])                          # qubit 1
pushQubit([0.6,0.8])                      # qubit 2
print(workspace)
applyGate(SWAP_gate)
print(workspace)

#Move a qubit to top of the stack using tosqubit
workspace = np.array([[1.]])
pushQubit([1,0])
pushQubit([0.6,0.8])
print(workspace)
tosQubit(2)
print(workspace)

#Alternatively use reshape and swapaxes
#def tosQubit(k):
#global workspace
#if k > 1:                                               # if non-trivial
#    workspace = np.reshape(workspace,(-1,2,2**(k-1)))
#     workspace = np.swapaxes(workspace,-2,-1)

# Measure a qubit

def probQubit():
    global workspace
    workspace = np.reshape(workspace,(-1,2)) 
    return np.linalg.norm(workspace,axis=0)**2
def measureQubit():
    global workspace
    prob = probQubit()
    measurement = np.random.choice(2,p=prob)         # select 0 or 1 
    workspace = (workspace[:,[measurement]]/
    np.sqrt(prob[measurement])) 
    return str(measurement)

workspace = np.array([[1. ]])
for n in range(30):
    pushQubit([0.6,0.8])
    print(measureQubit(), end="")
