import numpy as np

# Initialize the quantum workspace
workspace = np.array([[1.]])  # Represents the |0⟩ state

# Define quantum gates
X_gate = np.array([[0, 1], [1, 0]])  # Pauli-X (NOT) gate
Z_gate = np.array([[1, 0], [0, -1]])  # Pauli-Z gate
H_gate = np.array([[1, 1], [1, -1]]) * np.sqrt(0.5)  # Hadamard gate

# Stack to keep track of qubit names
namestack = []

# Function to push a qubit onto the stack with given weights
def pushQubit(name, weights):
    global workspace, namestack
    if workspace.shape == (1, 1):
        namestack = []
    namestack.append(name)
    weights = np.array(weights, dtype=complex)
    weights /= np.linalg.norm(weights)  # Normalize the weights
    workspace = np.kron(np.reshape(workspace, (1, -1)), weights)

# Function to apply a gate to specific qubits
def applyGate(gate, *names):
    global workspace, namestack
    if list(names) != namestack[-len(names):]:
        [tosQubit(name) for name in names]
    workspace = np.reshape(workspace, (-1, 2**len(names)))
    subworkspace = workspace[:, -gate.shape[0]:]
    np.matmul(subworkspace, gate.T, out=subworkspace)

# Function to swap qubit positions
def tosQubit(name):
    global workspace, namestack
    k = len(namestack) - namestack.index(name)
    if k > 1:
        namestack.append(namestack.pop(-k))
        workspace = np.reshape(workspace, (-1, 2, 2**(k-1)))
        workspace = np.swapaxes(workspace, -2, -1)

# Function to calculate the probability of measuring a qubit
def probQubit(name):
    global workspace
    tosQubit(name)
    workspace = np.reshape(workspace, (-1, 2))
    prob = np.linalg.norm(workspace, axis=0)**2
    return prob / prob.sum()

# Function to measure a qubit
def measureQubit(name):
    global workspace, namestack
    prob = probQubit(name)
    measurement = np.random.choice(2, p=prob)
    workspace = (workspace[:, [measurement]] / np.sqrt(prob[measurement]))
    namestack.pop()
    return str(measurement)

# Oracle that flips the phase of |111101⟩ (target state)
def sample_phaseOracle(qubits):
    applyGate(X_gate, qubits[1])  # Negate qubit 1
    applyGate(Z_gate, *namestack)  # Controlled Z gate
    applyGate(X_gate, qubits[1])  # Restore qubit 1

# Inversion about the mean (diffusion operator)
def zero_phaseOracle(qubits):
    for qubit in qubits:
        applyGate(X_gate, qubit)  # Negate all inputs
    applyGate(Z_gate, *namestack)  # Controlled Z gate
    for qubit in qubits:
        applyGate(X_gate, qubit)  # Restore inputs

# Grover's search algorithm
def groverSearch(n, printProb=True):
    optimalTurns = int(np.pi / 4 * np.sqrt(2**n) - 1 / 2)  # Number of iterations
    qubits = list(range(n))  # Generate qubit names
    for qubit in qubits:
        pushQubit(qubit, [1, 1])  # Initialize qubits in state |+>
    for k in range(optimalTurns):
        sample_phaseOracle(qubits)  # Apply phase oracle
        for qubit in qubits:
            applyGate(H_gate, qubit)  # Apply Hadamard gate
        zero_phaseOracle(qubits)  # Apply diffusion operator
        for qubit in qubits:
            applyGate(H_gate, qubit)  # Apply Hadamard gate
        if printProb:
            print(probQubit(qubits[0]))  # Print probability of measuring |0⟩ for qubit 0
    for qubit in reversed(qubits):
        print(measureQubit(qubit), end='')  # Measure and print each qubit

# Run Grover's search for 6 qubits
workspace = np.array([[1.]])  # Reset workspace
groverSearch(6)
